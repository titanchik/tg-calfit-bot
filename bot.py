import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from datetime import datetime
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    WEIGHT, HEIGHT, AGE, GENDER, ACTIVITY_LEVEL, CITY,
    LOG_WATER, LOG_FOOD, LOG_WORKOUT,
    LOG_FOOD_AMOUNT, LOG_WORKOUT_TYPE, LOG_WORKOUT_TIME
) = range(12)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API OpenWeatherMap
class WeatherAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "http://api.openweathermap.org/data/2.5/weather"

    def get_temperature(self, city):
        try:
            params = {
                'q': city,
                'appid': self.api_key,
                'units': 'metric'
            }
            response = requests.get(self.base_url, params=params)
            data = response.json()
            return data['main']['temp']
        except Exception as e:
            logger.error(f"Error getting weather: {e}")
            return None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
weather_api = WeatherAPI(os.getenv('OWM_API_KEY', '01f474020efe5047728b89b3be2e4cde'))


# –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º
def calculate_norms(user_data):
    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –≤–æ–¥—ã
    water_base = user_data['weight'] * 30
    water_activity = 0  # –ë—É–¥–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

    temp = weather_api.get_temperature(user_data['city'])
    water_temp = 500 if temp and temp > 25 else 0

    water_total = water_base + water_activity + water_temp

    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π (—Ñ–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞)
    if user_data['gender'] == 'male':
        calorie_base = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] + 5
    else:
        calorie_base = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] - 161

    activity_multiplier = {
        '–Ω–∏–∑–∫–∏–π': 1.2,
        '—Å—Ä–µ–¥–Ω–∏–π': 1.55,
        '–≤—ã—Å–æ–∫–∏–π': 1.9
    }

    calorie_total = calorie_base * activity_multiplier.get(user_data['activity_level'], 1.2)

    return {
        'water': water_total,
        'calories': calorie_total
    }


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    users[user_id] = {
        'logged_water': 0,
        'logged_calories': 0,
        'burned_calories': 0,
        'food_log': [],
        'workout_log': []
    }

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏ –∫–∞–ª–æ—Ä–∏—è–º–∏.\n"
        "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:",
        reply_markup=ReplyKeyboardRemove()
    )
    return WEIGHT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞
async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        weight_input = update.message.text.strip().lower()
        weight_input = weight_input.replace('–∫–≥', '').replace('kg', '').replace(',', '.').strip()

        # –£–¥–∞–ª—è–µ–º —Å–ª—ç—à–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if weight_input.startswith('/'):
            weight_input = weight_input[1:]

        weight = float(weight_input)
        if weight <= 0 or weight > 300:
            raise ValueError

        users[user_id]['weight'] = weight
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º:")
        return HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 300, –º–æ–∂–Ω–æ —Å '–∫–≥'):")
        return WEIGHT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞
async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        height_input = update.message.text.strip().lower()
        height_input = height_input.replace('—Å–º', '').replace('cm', '').replace(',', '.').strip()

        # –£–¥–∞–ª—è–µ–º —Å–ª—ç—à–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if height_input.startswith('/'):
            height_input = height_input[1:]

        height = float(height_input)
        if height <= 0 or height > 250:
            raise ValueError

        users[user_id]['height'] = height
        await update.message.reply_text("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 250, –º–æ–∂–Ω–æ —Å '—Å–º'):")
        return HEIGHT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        age = int(update.message.text)
        if age <= 0 or age > 120:
            raise ValueError
        users[user_id]['age'] = age

        reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return GENDER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120):")
        return AGE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞
async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    gender = update.message.text.lower()
    if gender not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return GENDER

    users[user_id]['gender'] = 'male' if gender == '–º—É–∂—Å–∫–æ–π' else 'female'

    reply_keyboard = [['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']]
    await update.message.reply_text(
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?\n"
        "–ù–∏–∑–∫–∏–π - —Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏\n"
        "–°—Ä–µ–¥–Ω–∏–π - —É–º–µ—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "–í—ã—Å–æ–∫–∏–π - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return ACTIVITY_LEVEL


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def activity_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    activity_level = update.message.text.lower()
    if activity_level not in ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return ACTIVITY_LEVEL

    users[user_id]['activity_level'] = activity_level

    await update.message.reply_text(
        "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è? (–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–æ—Ä–º—ã –≤–æ–¥—ã)",
        reply_markup=ReplyKeyboardRemove()
    )
    return CITY


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
async def city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    city = update.message.text
    users[user_id]['city'] = city

    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º
    norms = calculate_norms(users[user_id])
    users[user_id]['water_goal'] = norms['water']
    users[user_id]['calorie_goal'] = norms['calories']

    await update.message.reply_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
        f"–¢–≤–æ–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:\n"
        f"üíß –í–æ–¥–∞: {norms['water']} –º–ª\n"
        f"üçè –ö–∞–ª–æ—Ä–∏–∏: {norms['calories']:.0f} –∫–∫–∞–ª\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/log_water - –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É\n"
        f"/log_food - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏\n"
        f"/log_workout - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        f"/check_progress - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"/set_profile - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã
async def log_water(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞) –≤ –º–ª?")
    return LOG_WATER


async def save_water(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        amount = int(update.message.text)
        if amount <= 0:
            raise ValueError

        users[user_id]['logged_water'] += amount
        remaining = max(0, users[user_id]['water_goal'] - users[user_id]['logged_water'])

        await update.message.reply_text(
            f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining} –º–ª"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
        return LOG_WATER


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã
async def log_food(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ß—Ç–æ —Ç—ã —Å—ä–µ–ª(–∞)? –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    return LOG_FOOD


async def save_food(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    food_name = update.message.text

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å API –ø–∏—Ç–∞–Ω–∏—è
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    food_db = {
        '—è–±–ª–æ–∫–æ': 52,
        '–±–∞–Ω–∞–Ω': 89,
        '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞': 165,
        '—Ä–∏—Å': 130,
        '–≥—Ä–µ—á–∫–∞': 110,
        '–æ–≤—Å—è–Ω–∫–∞': 68,
        '—è–π—Ü–æ': 70,
        '—Ç–≤–æ—Ä–æ–≥': 120,
        '–º–æ–ª–æ–∫–æ': 42,
        '–∫–æ—Ñ–µ': 0
    }

    calories = food_db.get(food_name.lower(), 100)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 –∫–∫–∞–ª

    users[user_id]['food_log'].append({
        'name': food_name,
        'calories': calories,
        'time': datetime.now().strftime("%H:%M")
    })

    await update.message.reply_text(
        f"–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º {food_name} —Ç—ã —Å—ä–µ–ª(–∞)? (–ü—Ä–∏–º–µ—Ä–Ω–æ)")
    return LOG_FOOD_AMOUNT


async def save_food_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError

        last_food = users[user_id]['food_log'][-1]
        calories = last_food['calories'] * amount / 100
        users[user_id]['logged_calories'] += calories

        await update.message.reply_text(
            f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount}–≥ {last_food['name']} - {calories:.1f} –∫–∫–∞–ª\n"
            f"–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {users[user_id]['logged_calories']:.1f} –∫–∫–∞–ª"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
        return LOG_FOOD_AMOUNT


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async def log_workout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [['–ë–µ–≥', '–•–æ–¥—å–±–∞'], ['–í–µ–ª–æ—Å–∏–ø–µ–¥', '–ü–ª–∞–≤–∞–Ω–∏–µ'], ['–°–∏–ª–æ–≤–∞—è', '–ô–æ–≥–∞']]
    await update.message.reply_text(
        "–ö–∞–∫–æ–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return LOG_WORKOUT_TYPE


async def log_workout_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    workout_type = update.message.text
    context.user_data['workout_type'] = workout_type

    await update.message.reply_text(
        f"–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {workout_type.lower()}?",
        reply_markup=ReplyKeyboardRemove()
    )
    return LOG_WORKOUT_TIME


async def save_workout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        minutes = int(update.message.text)
        if minutes <= 0:
            raise ValueError

        workout_type = context.user_data['workout_type']

        # –†–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–∫–∫–∞–ª/–º–∏–Ω)
        workout_calories = {
            '–ë–µ–≥': 10,
            '–•–æ–¥—å–±–∞': 5,
            '–í–µ–ª–æ—Å–∏–ø–µ–¥': 8,
            '–ü–ª–∞–≤–∞–Ω–∏–µ': 7,
            '–°–∏–ª–æ–≤–∞—è': 6,
            '–ô–æ–≥–∞': 3
        }

        calories_burned = minutes * workout_calories.get(workout_type, 5)
        users[user_id]['burned_calories'] += calories_burned

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–¥–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        water_extra = (minutes // 30) * 200
        users[user_id]['water_goal'] += water_extra

        users[user_id]['workout_log'].append({
            'type': workout_type,
            'minutes': minutes,
            'calories': calories_burned,
            'time': datetime.now().strftime("%H:%M")
        })

        await update.message.reply_text(
            f"–ó–∞–ø–∏—Å–∞–Ω–æ: {workout_type} {minutes} –º–∏–Ω - —Å–æ–∂–∂–µ–Ω–æ {calories_burned} –∫–∫–∞–ª\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π {water_extra} –º–ª –≤–æ–¥—ã"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
        return LOG_WORKOUT_TIME


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def check_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    user = users[user_id]
    water_percent = min(100, user['logged_water'] / user['water_goal'] * 100)
    calories_percent = min(100, user['logged_calories'] / user['calorie_goal'] * 100)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    def create_progress_bar(percent):
        filled = '‚ñì' * int(percent / 10)
        empty = '‚ñë' * (10 - len(filled))
        return f"{filled}{empty} {percent:.1f}%"

    water_bar = create_progress_bar(water_percent)
    calories_bar = create_progress_bar(calories_percent)

    message = (
        f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        f"üíß –í–æ–¥–∞: {user['logged_water']}/{user['water_goal']} –º–ª\n"
        f"{water_bar}\n\n"
        f"üçè –ö–∞–ª–æ—Ä–∏–∏: {user['logged_calories']:.1f}/{user['calorie_goal']} –∫–∫–∞–ª\n"
        f"{calories_bar}\n"
        f"üî• –°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª\n\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['logged_calories'] - user['burned_calories']:.1f} –∫–∫–∞–ª"
    )

    await update.message.reply_text(message)


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning(f"Update {update} caused error {context.error}")
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(
        os.getenv('TELEGRAM_TOKEN', '7631239367:AAGHmD8-61R3BPWyo2MU7ZABPxzXgSXuYvQ')
    ).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    profile_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('set_profile', start)],
        states={
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender)],
            ACTIVITY_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, activity_level)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥—ã
    water_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('log_water', log_water)],
        states={
            LOG_WATER: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_water)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥—ã
    food_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('log_food', log_food)],
        states={
            LOG_FOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_food)],
            LOG_FOOD_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_food_amount)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('log_workout', log_workout)],
        states={
            LOG_WORKOUT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_workout_time)],
            LOG_WORKOUT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_workout)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(profile_conv_handler)
    application.add_handler(water_conv_handler)
    application.add_handler(food_conv_handler)
    application.add_handler(workout_conv_handler)
    application.add_handler(CommandHandler('check_progress', check_progress))
    application.add_handler(CommandHandler('start', start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()